///////////////////////////////////////
// Global Variables
///////////////////////////////////////

  $site-width: 960px;


///////////////////////////////////////
// Colors
///////////////////////////////////////

  $base:              #FFFFFF;
  $text:              #5E5E66;
  $primary:           #16A8CC;
  $primary-dark:      mix($primary, black, 80%);
  $primary-light:     mix($primary, white, 80%);
  $secondary:         #de555a;
  $secondary-dark:    mix($secondary, black, 85%);
  $secondary-light:   mix($secondary, white, 85%);
  $gray:              #ADABA8;
  $gray-dark:         mix($gray, black, 85%);
  $gray-light:        #EEE;


///////////////////////////////////////
// Type Stuff
///////////////////////////////////////

  $serif: Georgia, "Times New Roman", serif;
  $sans-serif: Helvetica, Arial, Verdana, sans-serif;
  $type-ratio: 1.45;
  $font-size: 1.3125rem; // 21px
  $font-size-px: 21px;
  $line-height: $type-ratio;
  $type-margin-bottom: $font-size * $type-ratio;


///////////////////////////////////////
// Grid Magicks
///////////////////////////////////////
/**
 * If you are building a non-responsive site but would still like to use
 * csswizardry-grids, set this to ‘false’:
 */
$responsive:            true!default;


/**
 * Is this build mobile first? Setting to ‘true’ means that all grids will be
 * 100% width if you do not apply a more specific class to them.
 */
$mobile-first:          true!default;


/**
 * Set the spacing between your grid items.
 */
$gutter:                25px!default;


/**
 * Would you like Sass’ silent classes, or regular CSS classes?
 */
$use-silent-classes:    true!default;


/**
 * Would you like push and pull classes enabled?
 */
$push:                  true!default;
$pull:                  true!default;


/**
 * Using `inline-block` means that the grid items need their whitespace removing
 * in order for them to work correctly. Set the following to true if you are
 * going to achieve this by manually removing/commenting out any whitespace in
 * your HTML yourself.
 *
 * Setting this to false invokes a hack which cannot always be guaranteed,
 * please see the following for more detail:
 *
 * github.com/csswizardry/csswizardry-grids/commit/744d4b23c9d2b77d605b5991e54a397df72e0688
 * github.com/csswizardry/inuit.css/issues/170#issuecomment-14859371
 */
$use-markup-fix:        false!default;


/**
 * Define your breakpoints. The first value is the prefix that shall be used for
 * your classes (e.g. `.palm--one-half`), the second value is the media query
 * that the breakpoint fires at.
 */
$breakpoints: (
    'palm' '(max-width: 480px)',
    'lap' '(min-width: 481px) and (max-width: 1023px)',
    'portable' '(max-width: 1023px)',
    'desk' '(min-width: 1024px)'
)!default;


/**
 * Define which namespaced breakpoints you would like to generate for each of
 * widths, push and pull. This is handy if you only need pull on, say, desk, or
 * you only need a new width breakpoint at mobile sizes. It allows you to only
 * compile as much CSS as you need. All are turned on by default, but you can
 * add and remove breakpoints at will.
 *
 * Push and pull shall only be used if `$push` and/or `$pull` and `$responsive`
 * have been set to ‘true’.
 */
$breakpoint-has-widths: ('palm', 'lap', 'portable', 'desk')!default;
$breakpoint-has-push:   ('palm', 'lap', 'portable', 'desk')!default;
$breakpoint-has-pull:   ('palm', 'lap', 'portable', 'desk')!default;


/**
 * You do not need to edit anything from this line onward; csswizardry-grids is
 * good to go. Happy griddin’!
 */
$class-type:            unquote(".");

@if $use-silent-classes == true{
    $class-type:        unquote("%");
}
